{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-code-notes/src/templates/TagPage.js","webpack:///./node_modules/gatsby-theme-code-notes/src/components/NoteList/SortButton.tsx","webpack:///./node_modules/@hookit/local-storage/esm/useLocalStorage.js","webpack:///./node_modules/gatsby-theme-code-notes/src/components/NoteList/NoteList.tsx","webpack:///./node_modules/gatsby-theme-code-notes/src/components/NoteList/useSortableData.ts","webpack:///./node_modules/gatsby-theme-code-notes/src/components/NotesPage/NotesPage.tsx"],"names":["NotesPage","getClassNamesFor","name","sortConfig","key","direction","undefined","SortButton","requestSort","sortKey","children","variant","type","onClick","className","sx","color","pointerEvents","size","initialValue","_React$useState","item","window","localStorage","getItem","test","match","length","JSON","parse","error","_React$useState2","storedValue","setStoredValue","value","setItem","stringify","console","NoteList","items","config","useLocalStorage","setSortConfig","useMemo","sortableItems","sort","a","b","node","frontmatter","toLowerCase","useSortableData","notes","justifyContent","alignItems","mb","map","title","tags","emoji","modified","modifiedTimestamp","slug","fields","NoteListItem","dateModified","data","pageContext","location","allMdx","edges","siteTitle","useSiteMetadata","Layout","activeTag","tag","path","pathname","basePath","hasUntagged","as","TagDot"],"mappings":"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","file":"component---node-modules-gatsby-theme-code-notes-src-templates-tag-page-js-8336636196192f7747e7.js","sourcesContent":["import { graphql } from 'gatsby'\nimport { NotesPage } from '../components/NotesPage'\n\nexport default NotesPage\n\nexport const pageQuery = graphql`\n  query($tag: String!) {\n    allMdx(\n      sort: { fields: frontmatter___title, order: ASC }\n      filter: { frontmatter: { tags: { eq: $tag } } }\n    ) {\n      edges {\n        node {\n          id\n          ...AllPages\n        }\n      }\n    }\n  }\n`\n","import React, { Fragment } from 'react'\nimport { Button } from 'theme-ui'\nimport { BiSortDown, BiSortUp } from 'react-icons/bi'\n\nconst getClassNamesFor = (name, sortConfig) => {\n  if (!sortConfig) {\n    return\n  }\n  return sortConfig.key === name ? `active ${sortConfig.direction}` : undefined\n}\n\nexport const SortButton = ({ requestSort, sortKey, sortConfig, children }) => (\n  <Button\n    variant=\"sort\"\n    type=\"button\"\n    onClick={() => requestSort(sortKey)}\n    className={getClassNamesFor(sortKey, sortConfig)}\n  >\n    {children}\n    {sortConfig.key === sortKey && (\n      <Fragment>\n        {sortConfig.direction === 'descending' ? (\n          <BiSortDown\n            sx={{\n              color: 'inherit',\n              pointerEvents: 'none',\n            }}\n            size=\"15px\"\n          />\n        ) : (\n          <BiSortUp\n            sx={{\n              color: 'inherit',\n              pointerEvents: 'none',\n            }}\n            size=\"15px\"\n          />\n        )}\n      </Fragment>\n    )}\n  </Button>\n)\n","import _slicedToArray from \"/home/runner/work/pkolt.ru/pkolt.ru/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\n\nfunction useLocalStorage(key, initialValue) {\n  var _React$useState = React.useState(function () {\n    try {\n      var item = window.localStorage.getItem(key);\n\n      if (item) {\n        var test = item.match(/^(\\[|\\{|\\d).*(\\]|\\}|\\d)?$/gm);\n\n        if (test && test.length) {\n          return JSON.parse(item);\n        } else {\n          return item;\n        }\n      } else {\n        return initialValue;\n      }\n    } catch (error) {\n      return initialValue;\n    }\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      storedValue = _React$useState2[0],\n      setStoredValue = _React$useState2[1];\n\n  var setValue = React.useCallback(function (value) {\n    try {\n      setStoredValue(value);\n\n      if (typeof value === 'object') {\n        window.localStorage.setItem(key, JSON.stringify(value));\n      } else {\n        window.localStorage.setItem(key, value);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }, [key]);\n  return [storedValue, setValue];\n}\n\nexport default useLocalStorage;","import React, { Fragment, FunctionComponent } from 'react'\nimport { Flex } from 'theme-ui'\nimport { NoteListItem } from '../NoteListItem'\nimport { SortButton } from './SortButton'\nimport { useSortableData } from './useSortableData'\n\ninterface NoteListProps {\n  notes: any[]\n}\n\nexport const NoteList: FunctionComponent<NoteListProps> = ({ notes }) => {\n  const { items, requestSort, sortConfig } = useSortableData(notes, {\n    key: 'title',\n    direction: 'ascending',\n  })\n\n  return (\n    <Fragment>\n      <Flex\n        sx={{\n          justifyContent: 'flex-end',\n          alignItems: 'center',\n          mb: 2,\n        }}\n      >\n        <SortButton\n          requestSort={requestSort}\n          sortKey=\"title\"\n          sortConfig={sortConfig}\n        >\n          A-Z\n        </SortButton>\n        <SortButton\n          requestSort={requestSort}\n          sortKey=\"modifiedTimestamp\"\n          sortConfig={sortConfig}\n        >\n          Date\n        </SortButton>\n      </Flex>\n\n      {items.map(({ node }) => {\n        const {\n          title,\n          tags,\n          emoji,\n          modified,\n          modifiedTimestamp,\n        } = node.frontmatter\n        const { slug } = node.fields\n        return (\n          <NoteListItem\n            title={title}\n            emoji={emoji}\n            tags={tags}\n            slug={slug}\n            key={slug}\n            dateModified={modified}\n            modifiedTimestamp={modifiedTimestamp}\n          />\n        )\n      })}\n    </Fragment>\n  )\n}\n","import useLocalStorage from '@hookit/local-storage'\nimport { useMemo } from 'react'\n\nexport const useSortableData = (items, config = null) => {\n  const [sortConfig, setSortConfig] = useLocalStorage(\n    'codeNotesSortConfig',\n    config\n  )\n\n  const sortedItems = useMemo(() => {\n    let sortableItems = [...items]\n    if (sortConfig !== null) {\n      sortableItems.sort((a, b) => {\n        if (\n          a.node.frontmatter[sortConfig.key]?.toLowerCase() <\n          b.node.frontmatter[sortConfig.key]?.toLowerCase()\n        ) {\n          return sortConfig.direction === 'ascending' ? -1 : 1\n        }\n        if (\n          a.node.frontmatter[sortConfig.key]?.toLowerCase() >\n          b.node.frontmatter[sortConfig.key]?.toLowerCase()\n        ) {\n          return sortConfig.direction === 'ascending' ? 1 : -1\n        }\n        return 0\n      })\n    }\n    return sortableItems\n  }, [items, sortConfig])\n\n  const requestSort = (key) => {\n    let direction = 'ascending'\n    if (\n      sortConfig &&\n      sortConfig.key === key &&\n      sortConfig.direction === 'ascending'\n    ) {\n      direction = 'descending'\n    }\n    setSortConfig({ key, direction })\n  }\n\n  return { items: sortedItems, requestSort, sortConfig }\n}\n","/** @jsx jsx */\nimport { jsx, Heading } from 'theme-ui'\nimport { Fragment } from 'react'\nimport { NoteList } from '../NoteList'\nimport { Layout } from '../Layout'\nimport { useSiteMetadata } from '../../use-site-metadata'\nimport { TagDot } from '../TagDot'\n\nexport const NotesPage = ({ data, pageContext, location }) => {\n  const notes = data.allMdx.edges\n  const { title } = useSiteMetadata()\n  const siteTitle = title\n\n  return (\n    <Layout\n      activeTag={pageContext.tag}\n      path={location.pathname}\n      basePath={pageContext.basePath}\n      hasUntagged={pageContext.hasUntagged}\n      tags={pageContext.tags}\n      title={pageContext.tag ? `Tag: ${pageContext.tag}` : siteTitle}\n    >\n      {pageContext.tag && (\n        <Heading as=\"h1\" variant=\"noteTitle\">\n          {pageContext.tag !== 'untagged' ? (\n            <Fragment>\n              <TagDot tag={pageContext.tag} size=\"0.5em\" /> {pageContext.tag}\n            </Fragment>\n          ) : (\n            <Fragment>Untagged Notes</Fragment>\n          )}\n        </Heading>\n      )}\n      <NoteList notes={notes} />\n    </Layout>\n  )\n}\n"],"sourceRoot":""}