{
    "componentChunkName": "component---node-modules-gatsby-theme-code-notes-src-templates-note-js",
    "path": "/esp32-wifi",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WiFi –≤ ESP32?\",\n  \"emoji\": \"ü§≥\",\n  \"created\": \"2022-06-12T00:00:00.000Z\",\n  \"modified\": \"2022-06-12T00:00:00.000Z\",\n  \"tags\": [\"ESP32\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\u0417\\u0430\\u0434\\u0430\\u0447\\u0430:\"), \" \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u041F\\u043E\\u0434\\u043A\\u043B\\u044E\\u0447\\u0438\\u0442\\u044C\\u0441\\u044F \\u043A \\u0442\\u043E\\u0447\\u043A\\u0435 \\u0434\\u043E\\u0441\\u0442\\u0443\\u043F\\u0430 WiFi \\u0432 ESP32 \\u0441 \\u043F\\u043E\\u043C\\u043E\\u0449\\u044C\\u044E \\u0444\\u0440\\u0435\\u0439\\u043C\\u0432\\u043E\\u0440\\u043A\\u0430 ESP-IDF.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u041F\\u0440\\u0438 \\u043F\\u043E\\u0434\\u043A\\u043B\\u044E\\u0447\\u0435\\u043D\\u0438\\u0438 \\u0437\\u0430\\u0434\\u0430\\u0442\\u044C \\u043A\\u043B\\u0438\\u0435\\u043D\\u0442\\u0443 \\u0441\\u0432\\u043E\\u0435 \\u0438\\u043C\\u044F \\u043E\\u0442\\u043B\\u0438\\u0447\\u043D\\u043E\\u0435 \\u043E\\u0442 \\u0441\\u0442\\u0430\\u043D\\u0434\\u0430\\u0440\\u0442\\u043D\\u043E\\u0433\\u043E.\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\u0420\\u0435\\u0448\\u0435\\u043D\\u0438\\u0435:\")), mdx(\"p\", null, \"\\u041A\\u043E\\u0434 \\u043F\\u0440\\u043E\\u0433\\u0440\\u0430\\u043C\\u043C\\u044B \\u0434\\u043B\\u044F \\u043F\\u043E\\u0434\\u043A\\u043B\\u044E\\u0447\\u0435\\u043D\\u0438\\u044F \\u043A WiFi \\u043F\\u0440\\u0438\\u0432\\u0435\\u0434\\u0435\\u043D \\u043D\\u0438\\u0436\\u0435.\"), mdx(\"p\", null, \"\\u041A\\u043E\\u0434 \\u043F\\u043E\\u0434\\u043A\\u043B\\u044E\\u0447\\u0435\\u043D\\u0438\\u044F \\u043A WiFi \\u0432\\u044B\\u0433\\u043B\\u044F\\u0434\\u0438\\u0442 \\u0434\\u043E\\u0432\\u043E\\u043B\\u044C\\u043D\\u043E \\u043E\\u0431\\u044A\\u0435\\u043C\\u043D\\u044B\\u043C. \\u0421\\u0435\\u0442\\u0435\\u0432\\u044B\\u0435 \\u0438\\u043D\\u0442\\u0435\\u0440\\u0444\\u0435\\u0439\\u0441\\u044B \\u0438\\u0441\\u043F\\u043E\\u043B\\u044C\\u0437\\u0443\\u044E\\u0442 \\u0434\\u0435\\u0444\\u043E\\u043B\\u0442\\u043D\\u044B\\u0439 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/system/esp_event.html\"\n  }, \"\\u0446\\u0438\\u043A\\u043B \\u0441\\u043E\\u0431\\u044B\\u0442\\u0438\\u0439\"), \" \\u0434\\u043B\\u044F \\u043E\\u043F\\u043E\\u0432\\u0435\\u0449\\u0435\\u043D\\u0438\\u044F \\u043E \\u0445\\u043E\\u0434\\u0435 \\u043F\\u043E\\u0434\\u043A\\u043B\\u044E\\u0447\\u0435\\u043D\\u0438\\u044F. \\u041A\\u0440\\u043E\\u043C\\u0435 \\u0434\\u0435\\u0444\\u043E\\u043B\\u0442\\u043D\\u043E\\u0433\\u043E \\u0446\\u0438\\u043A\\u043B\\u0430 \\u0441\\u043E\\u0431\\u044B\\u0442\\u0438\\u0439 \\u043C\\u043E\\u0436\\u043D\\u043E \\u0441\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u0441\\u0432\\u043E\\u0439 \\u043E\\u0442\\u0434\\u0435\\u043B\\u044C\\u043D\\u044B\\u0439. \"), mdx(\"p\", null, \"\\u041F\\u043E\\u0441\\u043B\\u0435 \\u0437\\u0430\\u043F\\u0443\\u0441\\u043A\\u0430 \\u0441\\u043E\\u0435\\u0434\\u0438\\u043D\\u0435\\u043D\\u0438\\u044F \\u043C\\u044B \\u0432\\u044B\\u043F\\u043E\\u043B\\u043D\\u044F\\u0435\\u043C \\u043F\\u043E\\u0434\\u043A\\u043B\\u044E\\u0447\\u0435\\u043D\\u0438\\u0435 \\u043A WiFi. \\u041F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435 IP \\u0430\\u0434\\u0440\\u0435\\u0441\\u0430 \\u043C\\u044B \\u0440\\u0430\\u0441\\u0446\\u0435\\u043D\\u0438\\u0432\\u0430\\u0435\\u043C \\u043A\\u0430\\u043A \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E\\u0435 \\u043F\\u043E\\u0434\\u043A\\u043B\\u044E\\u0447\\u0435\\u043D\\u0438\\u0435 \\u043A WiFi. \\u041F\\u0440\\u0438 \\u0440\\u0430\\u0437\\u0440\\u044B\\u0432\\u0435 \\u0441\\u043E\\u0435\\u0434\\u0438\\u043D\\u0435\\u043D\\u0438\\u044F \\u0441 WiFi \\u043C\\u044B \\u043F\\u043E\\u043B\\u0443\\u0447\\u0438\\u043C \\u0441\\u043E\\u0431\\u044B\\u0442\\u0438\\u0435 \\u0438 \\u043F\\u043E\\u043F\\u0440\\u043E\\u0431\\u0443\\u0435\\u043C \\u0441\\u043D\\u043E\\u0432\\u0430 \\u043F\\u043E\\u0434\\u043A\\u043B\\u044E\\u0447\\u0438\\u0442\\u044C\\u0441\\u044F \\u043A WiFi, \\u0434\\u0435\\u043B\\u0430\\u044F \\u043E\\u043F\\u0440\\u0435\\u0434\\u0435\\u043B\\u0435\\u043D\\u043D\\u043E\\u0435 \\u043A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u043F\\u043E\\u043F\\u044B\\u0442\\u043E\\u043A \\u043F\\u043E\\u0434\\u043A\\u043B\\u044E\\u0447\\u0435\\u043D\\u0438\\u044F.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"#include \\\"freertos/FreeRTOS.h\\\"\\n#include \\\"driver/gpio.h\\\"\\n#include \\\"esp_log.h\\\"\\n#include \\\"esp_wifi.h\\\"\\n#include \\\"nvs_flash.h\\\"\\n#include \\\"esp_event.h\\\"\\n\\nstatic const char *TAG = \\\"WiFi\\\";\\n\\n#define ESP_MAXIMUM_RETRY 5\\n\\nstatic int s_retry_num = 0;\\n\\n#define WIFI_SSID \\\"your_wifi_ssid\\\"\\n#define WIFI_PASS \\\"your_wifi_password\\\"\\n\\nstatic const gpio_num_t LED_PIN = GPIO_NUM_2;\\n\\nstatic void sta_start_handler(void *arg, esp_event_base_t event_base,\\n                              int32_t event_id, void *event_data)\\n{\\n    ESP_LOGI(TAG, \\\"connect...\\\");\\n    esp_wifi_connect();\\n}\\n\\nstatic void sta_disconnected_handler(void *arg, esp_event_base_t event_base,\\n                                     int32_t event_id, void *event_data)\\n{\\n    if (s_retry_num < ESP_MAXIMUM_RETRY)\\n    {\\n        esp_wifi_connect();\\n        s_retry_num++;\\n        ESP_LOGI(TAG, \\\"retry to connect to the AP\\\");\\n    }\\n    else\\n    {\\n        // ...\\n    }\\n    ESP_LOGI(TAG, \\\"fail connect\\\");\\n    gpio_set_level(LED_PIN, 0);\\n}\\n\\nstatic void sta_got_ip_handler(void *arg, esp_event_base_t event_base,\\n                               int32_t event_id, void *event_data)\\n{\\n    ESP_LOGI(TAG, \\\"success connect\\\");\\n    ip_event_got_ip_t *event = (ip_event_got_ip_t *)event_data;\\n    ESP_LOGI(TAG, \\\"got ip:\\\" IPSTR, IP2STR(&event->ip_info.ip));\\n    s_retry_num = 0;\\n    gpio_set_level(LED_PIN, 1);\\n}\\n\\nvoid wifi_init_sta(void)\\n{\\n    ESP_ERROR_CHECK(esp_netif_init());\\n    ESP_ERROR_CHECK(esp_event_loop_create_default());\\n    esp_netif_t *esp_netif = esp_netif_create_default_wifi_sta();\\n    ESP_ERROR_CHECK(esp_netif_set_hostname(esp_netif, \\\"ESP32 Device\\\"));\\n    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();\\n    ESP_ERROR_CHECK(esp_wifi_init(&cfg));\\n\\n    ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT,\\n                                                        WIFI_EVENT_STA_START,\\n                                                        &sta_start_handler,\\n                                                        NULL,\\n                                                        NULL));\\n\\n    ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT,\\n                                                        WIFI_EVENT_STA_DISCONNECTED,\\n                                                        &sta_disconnected_handler,\\n                                                        NULL,\\n                                                        NULL));\\n\\n    ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT,\\n                                                        IP_EVENT_STA_GOT_IP,\\n                                                        &sta_got_ip_handler,\\n                                                        NULL,\\n                                                        NULL));\\n\\n    wifi_config_t wifi_config = {\\n        .sta = {\\n            .ssid = WIFI_SSID,\\n            .password = WIFI_PASS,\\n            .threshold.authmode = WIFI_AUTH_WPA2_PSK,\\n        },\\n    };\\n\\n    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));\\n    ESP_ERROR_CHECK(esp_wifi_set_ps(WIFI_PS_NONE));\\n    ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &wifi_config));\\n    ESP_ERROR_CHECK(esp_wifi_start());\\n}\\n\\nvoid app_main(void)\\n{\\n    // Setup LED\\n    gpio_pad_select_gpio(LED_PIN);\\n    gpio_set_direction(LED_PIN, GPIO_MODE_OUTPUT);\\n\\n    // Initialize NVS\\n    esp_err_t ret = nvs_flash_init();\\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\\n    {\\n        ESP_ERROR_CHECK(nvs_flash_erase());\\n        ret = nvs_flash_init();\\n    }\\n    ESP_ERROR_CHECK(ret);\\n\\n    wifi_init_sta();\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WiFi –≤ ESP32?","tags":["ESP32"],"emoji":"ü§≥","link":null,"modified":"June 12, 2022","modifiedTimestamp":"2022-06-12T00:00:00.000Z"},"references":[],"fields":{"slug":"/esp32-wifi"},"tableOfContents":{},"parent":{"relativePath":"esp32-wifi.md"}}},"pageContext":{"id":"5b00dc50-cbff-578a-91d2-3f48251ab0be","previous":{"id":"75b58091-de05-5c7c-ae99-9b8d24acf30a","frontmatter":{"title":"–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç Wemos D1 mini","tags":["Arduino","ESP8266","Wemos D1 mini"]},"fields":{"slug":"/fake-board-wemos-d1-mini"}},"next":{"id":"a8330ea8-57dd-59a3-bdcc-5612166d98bf","frontmatter":{"title":"–≠–Ω–µ—Ä–≥–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ NVS –≤ ESP32","tags":["ESP32"]},"fields":{"slug":"/esp32-nvs"}},"hasUntagged":false,"basePath":"/","tags":[{"tag":"ATmega328P","totalCount":1,"slug":"/a-tmega328-p","path":"/tag/a-tmega328-p"},{"tag":"ATtiny13a","totalCount":1,"slug":"/a-ttiny13a","path":"/tag/a-ttiny13a"},{"tag":"Android","totalCount":1,"slug":"/android","path":"/tag/android"},{"tag":"Arduino","totalCount":8,"slug":"/arduino","path":"/tag/arduino"},{"tag":"ESP32","totalCount":4,"slug":"/es-p32","path":"/tag/es-p32"},{"tag":"ESP8266","totalCount":2,"slug":"/es-p8266","path":"/tag/es-p8266"},{"tag":"Hardware","totalCount":1,"slug":"/hardware","path":"/tag/hardware"},{"tag":"JavaScript","totalCount":1,"slug":"/java-script","path":"/tag/java-script"},{"tag":"MariaDB","totalCount":1,"slug":"/maria-db","path":"/tag/maria-db"},{"tag":"Microcontrollers","totalCount":2,"slug":"/microcontrollers","path":"/tag/microcontrollers"},{"tag":"Node.js","totalCount":1,"slug":"/node-js","path":"/tag/node-js"},{"tag":"React Native","totalCount":1,"slug":"/react-native","path":"/tag/react-native"},{"tag":"TypeScript","totalCount":2,"slug":"/type-script","path":"/tag/type-script"},{"tag":"Wemos D1 mini","totalCount":2,"slug":"/wemos-d1-mini","path":"/tag/wemos-d1-mini"}]}},
    "staticQueryHashes": ["1308211557","2744905544","467212769"]}