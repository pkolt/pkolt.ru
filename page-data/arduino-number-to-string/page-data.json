{
    "componentChunkName": "component---node-modules-gatsby-theme-code-notes-src-templates-note-js",
    "path": "/arduino-number-to-string",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"–ö–∞–∫ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫—É –≤ Arduino?\",\n  \"emoji\": \"üî¢\",\n  \"created\": \"2021-06-29T00:00:00.000Z\",\n  \"modified\": \"2021-06-29T00:00:00.000Z\",\n  \"tags\": [\"Arduino\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\u041F\\u0440\\u0438 \\u0440\\u0430\\u0431\\u043E\\u0442\\u0435 \\u0441 Arduino \\u0438\\u043D\\u043E\\u0433\\u0434\\u0430 \\u0432\\u043E\\u0437\\u043D\\u0438\\u043A\\u0430\\u0435\\u0442 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0430 \\u043E\\u0442\\u043E\\u0431\\u0440\\u0430\\u0437\\u0438\\u0442\\u044C \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435 \\u043D\\u0430 \\u0434\\u0438\\u0441\\u043F\\u043B\\u0435\\u0435, \\u043D\\u0430\\u043F\\u0440\\u0438\\u043C\\u0435\\u0440 \\u0438\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044E \\u0441 \\u0434\\u0430\\u0442\\u0447\\u0438\\u043A\\u043E\\u0432.\"), mdx(\"p\", null, \"\\u041F\\u043E\\u0434\\u043E\\u0431\\u043D\\u044B\\u0435 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435 \\u043E\\u0431\\u044B\\u0447\\u043D\\u043E \\u043F\\u0440\\u0435\\u0434\\u0441\\u0442\\u0430\\u0432\\u043B\\u0435\\u043D\\u044B \\u0447\\u0438\\u0441\\u043B\\u043E\\u0432\\u044B\\u043C\\u0438 \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u044F\\u043C\\u0438, \\u0430 \\u043E\\u0442\\u043E\\u0431\\u0440\\u0430\\u0437\\u0438\\u0442\\u044C \\u043D\\u0435\\u043E\\u0431\\u0445\\u043E\\u0434\\u0438\\u043C\\u043E \\u0441\\u0442\\u0440\\u043E\\u043A\\u043E\\u0432\\u044B\\u0435.\"), mdx(\"p\", null, \"\\u041D\\u0430 \\u043F\\u043E\\u043C\\u043E\\u0449\\u044C \\u043D\\u0430\\u043C \\u043F\\u0440\\u0438\\u0445\\u043E\\u0434\\u0438\\u0442 \\u0437\\u043D\\u0430\\u043A\\u043E\\u043C\\u0430\\u044F \\u0432\\u0441\\u0435\\u043C C++ \\u043F\\u0440\\u043E\\u0433\\u0440\\u0430\\u043C\\u043C\\u0438\\u0441\\u0442\\u0430\\u043C \\u0444\\u0443\\u043D\\u043A\\u0446\\u0438\\u044F \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sprintf()\"), \", \\u043D\\u043E \\u0432\\u0441\\u0435 \\u043D\\u0435 \\u0442\\u0430\\u043A \\u043F\\u0440\\u043E\\u0441\\u0442\\u043E.\"), mdx(\"h2\", {\n    \"id\": \"–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º-—Ü–µ–ª–æ–µ-—á–∏—Å–ª–æ-–≤-—Å—Ç—Ä–æ–∫—É\"\n  }, \"\\u041F\\u0440\\u0435\\u043E\\u0431\\u0440\\u0430\\u0437\\u0443\\u0435\\u043C \\u0446\\u0435\\u043B\\u043E\\u0435 \\u0447\\u0438\\u0441\\u043B\\u043E \\u0432 \\u0441\\u0442\\u0440\\u043E\\u043A\\u0443\"), mdx(\"h3\", {\n    \"id\": \"—Ä–µ—à–µ–Ω–∏–µ-1-–∏—Å–ø–æ–ª—å–∑—É–µ–º-sprintfbuffer-format-val1-val2\"\n  }, \"\\u0420\\u0435\\u0448\\u0435\\u043D\\u0438\\u0435 1. \\u0418\\u0441\\u043F\\u043E\\u043B\\u044C\\u0437\\u0443\\u0435\\u043C sprintf(buffer, format, ...val1, val2)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int led_count = 5;\\nchar buff[20];\\nsprintf(buff, \\\"led count: %d\\\", led_count); // \\\"led count: 5\\\"\\n\")), mdx(\"h3\", {\n    \"id\": \"—Ä–µ—à–µ–Ω–∏–µ-2-–∏—Å–ø–æ–ª—å–∑—É–µ–º-itoainteger_value-buffer-base\"\n  }, \"\\u0420\\u0435\\u0448\\u0435\\u043D\\u0438\\u0435 2. \\u0418\\u0441\\u043F\\u043E\\u043B\\u044C\\u0437\\u0443\\u0435\\u043C itoa(integer_value, buffer, base)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int led_count = 5;\\nchar buff[20];\\nitoa(led_count, buff, 10); // \\\"5\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º-–≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ-—á–∏—Å–ª–æ-–≤-—Å—Ç—Ä–æ–∫—É\"\n  }, \"\\u041F\\u0440\\u0435\\u043E\\u0431\\u0440\\u0430\\u0437\\u0443\\u0435\\u043C \\u0432\\u0435\\u0449\\u0435\\u0441\\u0442\\u0432\\u0435\\u043D\\u043D\\u043E\\u0435 \\u0447\\u0438\\u0441\\u043B\\u043E \\u0432 \\u0441\\u0442\\u0440\\u043E\\u043A\\u0443\"), mdx(\"p\", null, \"\\u0424\\u0443\\u043D\\u043A\\u0446\\u0438\\u044F sprintf() \\u0432 Arduino \\u0432\\u0435\\u0434\\u0435\\u0442 \\u0441\\u0435\\u0431\\u044F \\u043D\\u0435 \\u043A\\u0430\\u043A \\u0432 \\u0441\\u0442\\u0430\\u043D\\u0434\\u0430\\u0440\\u0442\\u043D\\u043E\\u0439 \\u0431\\u0438\\u0431\\u043B\\u0438\\u043E\\u0442\\u0435\\u043A\\u0438 C++. \"), mdx(\"p\", null, \"\\u0415\\u0441\\u043B\\u0438 \\u0432\\u044B \\u043F\\u043E\\u043F\\u044B\\u0442\\u0430\\u0435\\u0442\\u0435\\u0441\\u044C \\u043E\\u0442\\u0444\\u043E\\u0440\\u043C\\u0430\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C \\u0432\\u0435\\u0449\\u0435\\u0441\\u0442\\u0432\\u0435\\u043D\\u043D\\u043E\\u0435 \\u0447\\u0438\\u0441\\u043B\\u043E \\u0441 \\u043F\\u043E\\u043C\\u043E\\u0449\\u044C\\u044E sprintf(), \\u0442\\u043E \\u043F\\u043E\\u043B\\u0443\\u0447\\u0438\\u0442\\u0435 \\u043D\\u0435\\u043E\\u0436\\u0438\\u0434\\u0430\\u043D\\u043D\\u044B\\u0439 \\u0440\\u0435\\u0437\\u0443\\u043B\\u044C\\u0442\\u0430\\u0442.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"float voltage = 5.6;\\nchar buff[20];\\nsprintf(buff, \\\"voltage: %0.2f\\\", voltage); // \\\"voltage: ?\\\"\\n\")), mdx(\"p\", null, \"\\u0412\\u044B \\u0437\\u0430\\u043C\\u0435\\u0442\\u0438\\u043B\\u0438 \\u0447\\u0442\\u043E \\u0432\\u043C\\u0435\\u0441\\u0442\\u043E \\u0432\\u0435\\u0449\\u0435\\u0441\\u0442\\u0432\\u0435\\u043D\\u043D\\u043E\\u0433\\u043E \\u0447\\u0438\\u0441\\u043B\\u0430 \\u0443 \\u0432\\u0430\\u0441 \\u043E\\u0442\\u043E\\u0431\\u0440\\u0430\\u0437\\u0438\\u043B\\u0441\\u044F \\u0441\\u0438\\u043C\\u0432\\u043E\\u043B \\\"?\\\" ?\"), mdx(\"p\", null, \"Arduino \\u043A\\u043E\\u043C\\u043F\\u0438\\u043B\\u044F\\u0442\\u043E\\u0440 \\u043E\\u0441\\u043D\\u043E\\u0432\\u0430\\u043D \\u043D\\u0430 avr-gcc, \\u0432 \\u0435\\u0433\\u043E \\u0440\\u0435\\u0430\\u043B\\u0438\\u0437\\u0430\\u0446\\u0438\\u0438 \\u043F\\u043E \\u0443\\u043C\\u043E\\u043B\\u0447\\u0430\\u043D\\u0438\\u044E \\u0432\\u044B\\u043A\\u043B\\u044E\\u0447\\u0435\\u043D\\u043E \\u0444\\u043E\\u0440\\u043C\\u0430\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0432\\u0435\\u0449\\u0435\\u0441\\u0442\\u0432\\u0435\\u043D\\u043D\\u044B\\u0445 \\u0447\\u0438\\u0441\\u0435\\u043B \\u0432 \\u0441\\u0442\\u0440\\u043E\\u043A\\u0438 \\u0434\\u043B\\u044F sprintf(). \\u0421\\u0434\\u0435\\u043B\\u0430\\u043D\\u043E \\u044D\\u0442\\u043E \\u0431\\u044B\\u043B\\u043E \\u043E\\u0447\\u0435\\u043D\\u044C \\u0434\\u0430\\u0432\\u043D\\u043E, \\u0438 \\u0432 \\u0442\\u0435 \\u0434\\u0430\\u043B\\u0435\\u043A\\u0438\\u0435 \\u0432\\u0440\\u0435\\u043C\\u0435\\u043D\\u0430 \\u044D\\u0442\\u043E \\u043E\\u0431\\u044A\\u044F\\u0441\\u043D\\u044F\\u043B\\u043E\\u0441\\u044C \\u044D\\u043A\\u043E\\u043D\\u043E\\u043C\\u0438\\u0435\\u0439 \\u043F\\u0430\\u043C\\u044F\\u0442\\u0438. \\u0414\\u043E \\u0441\\u0438\\u0445 \\u043F\\u043E\\u0440 \\u0440\\u0430\\u0437\\u0440\\u0430\\u0431\\u043E\\u0442\\u0447\\u0438\\u043A\\u0438 Arduino \\u043D\\u0435 \\u043F\\u0440\\u0438\\u043B\\u043E\\u0436\\u0438\\u043B\\u0438 \\u043D\\u0438\\u043A\\u0430\\u043A\\u0438\\u0445 \\u0443\\u0441\\u0438\\u043B\\u0438\\u0439 \\u0447\\u0442\\u043E\\u0431\\u044B \\u0438\\u0441\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C \\u044D\\u0442\\u043E\\u0442 \\u0434\\u043E\\u0441\\u0430\\u0434\\u043D\\u044B\\u0439 \\u043C\\u043E\\u043C\\u0435\\u043D\\u0442.\"), mdx(\"h3\", {\n    \"id\": \"—Ä–µ—à–µ–Ω–∏–µ-1-–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º-—Å-–ø–æ–º–æ—â—å—é-dtostrffloat_value-string_length-number_after_decimal-buffer\"\n  }, \"\\u0420\\u0435\\u0448\\u0435\\u043D\\u0438\\u0435 1. \\u041F\\u0440\\u0435\\u043E\\u0431\\u0440\\u0430\\u0437\\u0443\\u0435\\u043C \\u0441 \\u043F\\u043E\\u043C\\u043E\\u0449\\u044C\\u044E dtostrf(float_value, string_length, number_after_decimal, buffer)\"), mdx(\"p\", null, \"\\u041F\\u0430\\u0440\\u0430\\u043C\\u0435\\u0442\\u0440 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"string_length\"), \" \\u0437\\u0430\\u0434\\u0430\\u0435\\u0442 \\u0434\\u043B\\u0438\\u043D\\u0443 \\u0438\\u0442\\u043E\\u0433\\u043E\\u0432\\u043E\\u0439 \\u0441\\u0442\\u0440\\u043E\\u043A\\u0438, \\u0434\\u043E\\u043B\\u0436\\u0435\\u043D \\u0432\\u043A\\u043B\\u044E\\u0447\\u0430\\u0442\\u044C \\u043C\\u0435\\u0441\\u0442\\u043E \\u043F\\u043E\\u0434 \\u0441\\u0438\\u043C\\u0432\\u043E\\u043B\\u044B \\\".\\\" \\u0438 \\\"-\\\".\"), mdx(\"p\", null, \"\\u0415\\u0441\\u043B\\u0438 \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"string_length\"), \" - \\u043F\\u043E\\u043B\\u043E\\u0436\\u0438\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E\\u0435 \\u0438 \\u0438\\u0442\\u043E\\u0433\\u043E\\u0432\\u0430\\u044F \\u0441\\u0442\\u0440\\u043E\\u043A\\u0430 \\u043C\\u0435\\u043D\\u044C\\u0448\\u0435 \\u0447\\u0435\\u043C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"string_length\"), \", \\u0442\\u043E \\u0431\\u0443\\u0434\\u0443\\u0442 \\u0434\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D\\u044B \\u043F\\u0440\\u043E\\u0431\\u0435\\u043B\\u044B \\u0441\\u043B\\u0435\\u0432\\u0430.\"), mdx(\"p\", null, \"\\u0415\\u0441\\u043B\\u0438 \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"string_length\"), \" - \\u043E\\u0442\\u0440\\u0438\\u0446\\u0430\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E\\u0435 \\u0438 \\u0438\\u0442\\u043E\\u0433\\u043E\\u0432\\u0430\\u044F \\u0441\\u0442\\u0440\\u043E\\u043A\\u0430 \\u043C\\u0435\\u043D\\u044C\\u0448\\u0435 \\u0447\\u0435\\u043C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"string_length\"), \", \\u0442\\u043E \\u0431\\u0443\\u0434\\u0443\\u0442 \\u0434\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D\\u044B \\u043F\\u0440\\u043E\\u0431\\u0435\\u043B\\u044B \\u0441\\u043F\\u0440\\u0430\\u0432\\u0430.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"char buffer[30];\\nfloat temperature = 24.75;\\nfloat pressure = 733.93;\\n\\nchar str_temperature[6];\\ndtostrf(temperature, 6, 2, str_temperature); // \\\" 24.75\\\"\\n\\nchar str_pressure[7];\\ndtostrf(pressure, -7, 2, str_pressure); // \\\"733.93 \\\"\\n\\nsprintf(buffer, \\\"%s C, %s mmHg\\\", str_temperature, str_pressure); \\\" 24.75 C, 733.93 mmHg\\\"\\n\")), mdx(\"h3\", {\n    \"id\": \"—Ä–µ—à–µ–Ω–∏–µ-2-–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º-—Å-–ø–æ–º–æ—â—å—é-—Ñ–ª–∞–≥–æ–≤-–∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞\"\n  }, \"\\u0420\\u0435\\u0448\\u0435\\u043D\\u0438\\u0435 2. \\u041F\\u0440\\u0435\\u043E\\u0431\\u0440\\u0430\\u0437\\u0443\\u0435\\u043C \\u0441 \\u043F\\u043E\\u043C\\u043E\\u0449\\u044C\\u044E \\u0444\\u043B\\u0430\\u0433\\u043E\\u0432 \\u043A\\u043E\\u043C\\u043F\\u0438\\u043B\\u044F\\u0442\\u043E\\u0440\\u0430\"), mdx(\"p\", null, \"\\u041A \\u0441\\u043E\\u0436\\u0430\\u043B\\u0435\\u043D\\u0438\\u044E \\u0432 \\u0441\\u0430\\u043C\\u043E\\u043C Arduino \\u0443 \\u0432\\u0430\\u0441 \\u043D\\u0435 \\u043F\\u043E\\u043B\\u0443\\u0447\\u0438\\u0442\\u044C\\u0441\\u044F \\u0438\\u0437\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C \\u0444\\u043B\\u0430\\u0433\\u0438 \\u0441 \\u043A\\u043E\\u0442\\u043E\\u0440\\u044B\\u043C\\u0438 \\u043A\\u043E\\u043C\\u043F\\u0438\\u043B\\u0438\\u0440\\u0443\\u0435\\u0442\\u0441\\u044F \\u0432\\u0430\\u0448 \\u0441\\u043A\\u0435\\u0442\\u0447.\"), mdx(\"p\", null, \"\\u041D\\u043E \\u0435\\u0441\\u043B\\u0438 \\u0432\\u044B \\u0438\\u0441\\u043F\\u043E\\u043B\\u044C\\u0437\\u0443\\u0435\\u0442\\u0435 PlatformIO \\u0438\\u043B\\u0438 \\u0447\\u0442\\u043E-\\u0442\\u043E \\u043F\\u043E\\u0434\\u043E\\u0431\\u043D\\u043E\\u0435, \\u0442\\u043E \\u043C\\u043E\\u0436\\u0435\\u0442\\u0435 \\u043F\\u0440\\u043E\\u0441\\u0442\\u043E \\u0434\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u043D\\u0443\\u0436\\u043D\\u044B\\u0435 \\u0444\\u043B\\u0430\\u0433\\u0438 \\u0438 \\u0432\\u043A\\u043B\\u044E\\u0447\\u0438\\u0442\\u044C \\u043F\\u043E\\u043B\\u043D\\u0443\\u044E \\u043F\\u043E\\u0434\\u0434\\u0435\\u0440\\u0436\\u043A\\u0443 \\u0432\\u0435\\u0449\\u0435\\u0441\\u0442\\u0432\\u0435\\u043D\\u043D\\u044B\\u0445 \\u0447\\u0438\\u0441\\u0435\\u043B \\u0432 sprintf().\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"-Wl,-u,vfprintf -lprintf_flt -lm\\n\")), mdx(\"h3\", {\n    \"id\": \"—Ä–µ—à–µ–Ω–∏–µ-3-–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º-—Å-–ø–æ–º–æ—â—å—é-sprintf--dd\"\n  }, \"\\u0420\\u0435\\u0448\\u0435\\u043D\\u0438\\u0435 3. \\u041F\\u0440\\u0435\\u043E\\u0431\\u0440\\u0430\\u0437\\u0443\\u0435\\u043C \\u0441 \\u043F\\u043E\\u043C\\u043E\\u0449\\u044C\\u044E sprintf() + %d.%d\"), mdx(\"p\", null, \"\\u041C\\u043E\\u0436\\u043D\\u043E \\u0440\\u0430\\u0437\\u0431\\u0438\\u0442\\u044C \\u0432\\u0435\\u0449\\u0435\\u0441\\u0442\\u0432\\u0435\\u043D\\u043D\\u043E\\u0435 \\u0447\\u0438\\u0441\\u043B\\u043E \\u043D\\u0430 2 \\u0447\\u0430\\u0441\\u0442\\u0438 \\u0438 \\u0432\\u044B\\u0432\\u0435\\u0441\\u0442\\u0438 \\u043A\\u0430\\u0436\\u0434\\u0443\\u044E \\u0447\\u0430\\u0441\\u0442\\u044C \\u043A\\u0430\\u043A \\u0446\\u0435\\u043B\\u043E\\u0435 \\u0447\\u0438\\u0441\\u043B\\u043E.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int fractionalToInt(float value, byte decimal_places = 2) {\\n  return int((abs(value) - (int)abs(value)) * pow(10, decimal_places));\\n}\\n\\nfloat humidity = 35.89;\\nchar buff[20];\\nsprintf(buff, \\\"humidity: %d.%d\\\", (int)humidity, fractionalToInt(humidity)); \\\"humidity: 35.89\\\"\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"–ö–∞–∫ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫—É –≤ Arduino?","tags":["Arduino"],"emoji":"üî¢","link":null,"modified":"June 29, 2021","modifiedTimestamp":"2021-06-29T00:00:00.000Z"},"references":[],"fields":{"slug":"/arduino-number-to-string"},"tableOfContents":{"items":[{"url":"#–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º-—Ü–µ–ª–æ–µ-—á–∏—Å–ª–æ-–≤-—Å—Ç—Ä–æ–∫—É","title":"–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫—É","items":[{"url":"#—Ä–µ—à–µ–Ω–∏–µ-1-–∏—Å–ø–æ–ª—å–∑—É–µ–º-sprintfbuffer-format-val1-val2","title":"–†–µ—à–µ–Ω–∏–µ 1. –ò—Å–ø–æ–ª—å–∑—É–µ–º sprintf(buffer, format, ...val1, val2)"},{"url":"#—Ä–µ—à–µ–Ω–∏–µ-2-–∏—Å–ø–æ–ª—å–∑—É–µ–º-itoainteger_value-buffer-base","title":"–†–µ—à–µ–Ω–∏–µ 2. –ò—Å–ø–æ–ª—å–∑—É–µ–º itoa(integer_value, buffer, base)"}]},{"url":"#–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º-–≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ-—á–∏—Å–ª–æ-–≤-—Å—Ç—Ä–æ–∫—É","title":"–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫—É","items":[{"url":"#—Ä–µ—à–µ–Ω–∏–µ-1-–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º-—Å-–ø–æ–º–æ—â—å—é-dtostrffloat_value-string_length-number_after_decimal-buffer","title":"–†–µ—à–µ–Ω–∏–µ 1. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å –ø–æ–º–æ—â—å—é dtostrf(float_value, string_length, number_after_decimal, buffer)"},{"url":"#—Ä–µ—à–µ–Ω–∏–µ-2-–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º-—Å-–ø–æ–º–æ—â—å—é-—Ñ–ª–∞–≥–æ–≤-–∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞","title":"–†–µ—à–µ–Ω–∏–µ 2. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å –ø–æ–º–æ—â—å—é —Ñ–ª–∞–≥–æ–≤ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞"},{"url":"#—Ä–µ—à–µ–Ω–∏–µ-3-–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º-—Å-–ø–æ–º–æ—â—å—é-sprintf--dd","title":"–†–µ—à–µ–Ω–∏–µ 3. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å –ø–æ–º–æ—â—å—é sprintf() + %d.%d"}]}]},"parent":{"relativePath":"arduino-number-to-string.md"}}},"pageContext":{"id":"761f7c1d-c898-51d1-97b4-c03fc8a34e8b","previous":{"id":"75b58091-de05-5c7c-ae99-9b8d24acf30a","frontmatter":{"title":"–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç Wemos D1 mini","tags":["Arduino","ESP8266","Wemos D1 mini"]},"fields":{"slug":"/fake-board-wemos-d1-mini"}},"next":{"id":"c99fdf59-8cf5-54c5-a918-ae745307999f","frontmatter":{"title":"–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Arduino","tags":["Arduino"]},"fields":{"slug":"/arduino-cpp"}},"hasUntagged":false,"basePath":"/","tags":[{"tag":"ATmega328P","totalCount":1,"slug":"/a-tmega328-p","path":"/tag/a-tmega328-p"},{"tag":"ATtiny13a","totalCount":1,"slug":"/a-ttiny13a","path":"/tag/a-ttiny13a"},{"tag":"Android","totalCount":1,"slug":"/android","path":"/tag/android"},{"tag":"Arduino","totalCount":8,"slug":"/arduino","path":"/tag/arduino"},{"tag":"ESP32","totalCount":1,"slug":"/es-p32","path":"/tag/es-p32"},{"tag":"ESP8266","totalCount":2,"slug":"/es-p8266","path":"/tag/es-p8266"},{"tag":"Hardware","totalCount":1,"slug":"/hardware","path":"/tag/hardware"},{"tag":"JavaScript","totalCount":1,"slug":"/java-script","path":"/tag/java-script"},{"tag":"MariaDB","totalCount":1,"slug":"/maria-db","path":"/tag/maria-db"},{"tag":"Microcontrollers","totalCount":2,"slug":"/microcontrollers","path":"/tag/microcontrollers"},{"tag":"Node.js","totalCount":1,"slug":"/node-js","path":"/tag/node-js"},{"tag":"React Native","totalCount":1,"slug":"/react-native","path":"/tag/react-native"},{"tag":"TypeScript","totalCount":2,"slug":"/type-script","path":"/tag/type-script"},{"tag":"Wemos D1 mini","totalCount":2,"slug":"/wemos-d1-mini","path":"/tag/wemos-d1-mini"}]}},
    "staticQueryHashes": ["1308211557","2744905544","467212769"]}